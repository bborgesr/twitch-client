{"version":3,"file":"static/webpack/static/development/pages/channel.js.37d2a58d02246d884c74.hot-update.js","sources":["webpack:///./pages/channel.js"],"sourcesContent":["import Layout from '../components/Splash.js'\nimport fetch from 'isomorphic-unfetch'\n\n// const Stream = (props) => (\n//   <Layout>\n//     <iframe src={`https://player.twitch.tv/?channel=${props.stream.data[0].user_name.toLowerCase()}`}>\n//     </iframe>\n//     <p>{props.stream.data[0].title}</p>\n//     <p>{\"Live viewers: \" + props.stream.data[0].viewer_count}</p>\n//   </Layout>\n// )\n//\n// Stream.getInitialProps = async function(context) {\n//   const { name } = context.query\n//   const res = await fetch(`https://api.twitch.tv/helix/streams?user_login=${name}`, {\n//     headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n//   })\n//   const stream = await res.json()\n//   return { stream: stream }\n// }\n//\n// export default Stream\n\nexport default class Stream extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { stream: props.stream }// , loop: true }\n    this.updateViewers = this.updateViewers.bind(this)\n  }\n\n  static async getInitialProps(context) {\n    const { name } = context.query\n    const res = await fetch(`https://api.twitch.tv/helix/streams?user_login=${name}`, {\n      headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n    })\n    const stream = await res.json()\n    // fetch(`https://api.twitch.tv/helix/streams?user_login=${this.props.name}`, {\n    //   headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n    // }).then(res => res.json())\n    //   .then(json => this.setState({ stream: json }))\n    return { name: name, stream: stream }\n  }\n\n  // updateStream() {\n  //   fetch(`https://api.twitch.tv/helix/streams?user_login=${this.props.name}`, {\n  //     headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n  //   }).then(res => res.json())\n  //     .then(json => this.setState({ stream: json }))\n  // }\n  //\n  // componentDidMount() {\n  //   // this.timerID = setInterval(this.updateStream, 1000)\n  //   this.timerID = setInterval(() => {\n  //     console.log(this.state.stream.data[0].viewer_count)\n  //     fetch(`https://api.twitch.tv/helix/streams?user_login=${this.props.name}`, {\n  //       headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n  //     }).then(res => res.json())\n  //       .then(json => this.setState({ stream: json }))\n  //   }, 2000)\n  // }\n  //\n  // componentWillUnmount() {\n  //   clearInterval(this.timerID);\n  //   // this.setState({ loop: false })\n  // }\n\n  componentDidMount() {\n    // this.timerID = setInterval(this.updateStream, 1000)\n    this.timerID = setInterval(this.updateViewers, 3000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n    // this.setState({ loop: false })\n  }\n\n  updateViewers() {\n    console.log(this.state.stream.data[0].viewer_count)\n    fetch(`https://api.twitch.tv/helix/streams?user_login=${this.props.name}`, {\n      headers: { \"Client-ID\": \"o3ldtpya38q9y4y5y6rg98gqycz3pt\" }\n    }).then(res => res.json())\n      .then(json => this.setState({ stream: json }))\n  }\n\n  render() {\n    return (\n      <Layout>\n        <iframe src={`https://player.twitch.tv/?channel=${this.props.name.toLowerCase()}`}>\n        </iframe>\n        <p>{this.state.stream.data[0].title}</p>\n        <p>{\"Live viewers: \" + this.state.stream.data[0].viewer_count}</p>\n      </Layout>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAHA;AAIA;AACA;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AAEA;AAAA;AAMA;;;;;;AA/DA;;;;;;AACA;;AACA;AACA;AAAA;AAAA;AADA;AACA;;AADA;;AAGA;AACA;;AADA;AAKA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAlBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}